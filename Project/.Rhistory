type = "pie",
labels = aggregation_of_ingredients$Ingredients,
values = aggregation_of_ingredients$totalWeight,
showlegend = F
)
layout <-
list(
title = "Compositions of Ingredients by Weight",
family= "Lobster",
color = 'rgb(128,177,221)',
xaxis = list(domain = c(0.33, 0.67)),
yaxis = list(domain = c(0.33, 0.67))
)
p <- plot_ly()
p <-
add_trace(
p,
hole = trace2$hole,
type = trace2$type,
labels = trace2$labels,
values = trace2$values,
showlegend = trace2$showlegend
)
p <-
layout(
p,
title = layout$title,
xaxis = layout$xaxis,
yaxis = layout$yaxis,
paper_bgcolor = 'rgba(0,0,0,0)',
plot_bgcolor = 'rgba(0,0,0,0)'
)
p
})
output$barplot <- renderUI({
#   box(grocery_data$df %>% group_by(Ingredients) %>% summarise(totalWeight = sum(Weight)) %>% plot_ly(
#     x = ~ Ingredients,
#     y = ~ totalWeight,
#     type = "bar"
#   ) %>% layout(title = "Distribution of Groceries", xaxis = list(title = "Groceries"), yaxis = list(title = "Total Weight in Grams")))
})
#box(recipe_df$df$Recipes[i],cola)
bubble_df <-
data.frame(
'title' = character(),
'weights' = integer(),
'quantity' = integer(),
'units' = character(),
'ingredients' = character()
)
for (i in recipe_df$df$Recipes) {
row_data <- bubble_data %>% filter(title == c(i))
bubble_df <- rbind(bubble_df, row_data)
}
output$bubble_chart <- plotly::renderPlotly({
#colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')
colors <- c('#FF5733', '#7AFF33', '#33FFF0', '#333CFF', '#FF33E9')
fig <-
plot_ly(
bubble_df,
x = ~ quantity+1 ,
y = ~ weights,
type = 'scatter',
mode = 'markers',
color = ~ title,
sizes = c(50, 100),
colors = colors
,
marker = list(
sizemode = 'diameter',
opacity = 0.5,
size = ~ sqrt(weights) * 2
) ,
hoverinfo = 'text',
text = ~ paste(
'Recipe :',
title,
'<br>Ingredient:',
ingredients,
'<br> Measure:',
weights,
units
)
)
title <-
list(family = "Lobster",
color = 'rgb(128,177,221)',
size = 20)
fig <-
fig %>% layout(
title = 'Recipe Composition',
showlegend = F,
font = title,
margin = list(
l = 50,
r = 50,
b = 100,
t = 100,
pad = 4
),
xaxis = list(
title = 'Quantity',
type = 'log',
showgrid = F,
zeroline = F,
visible = F
),
yaxis = list(
title = 'Weights',
type = 'log',
showgrid = F,
zeroline = F,
visible = F
),
paper_bgcolor = 'rgb(0,0,0,0)',
plot_bgcolor = 'rgb(0,0,0,0)'
)
fig
})
output$pie_chart_choices<-renderUI({
selectInput("InputRecipe",
label = "Nutritions",
choices = recipe_df$df$Recipes)
})
observeEvent(input$InputRecipe,{
pie_data<-pie_chart_table(recipe_data)
pie_data_output<-pie_data%>%filter(title==input$InputRecipe)%>%dplyr::select(title,nutrition.name,quantity)%>%group_by(nutrition.name)%>%summarise(quantity=sum(quantity))
pie_data_output_1<-pie_data%>%filter(title==input$InputRecipe)%>%dplyr::select(title,variable,value)%>%group_by(variable)%>%summarise(value=sum(value))
output$pie_chart<-plotly::renderPlotly({
fig <- plot_ly(pie_data_output, labels = ~nutrition.name, values = ~quantity, type = 'pie',domain = list(x = c(0.6, 1), y = c(0.4, 1)))
fig<-fig%>%add_trace(data=pie_data_output_1,labels = ~variable, values = ~value,type = 'pie',domain = list(x = c(0, 0.4), y = c(0.4, 1)))
title<-list(color='rgb(128,177,221)',size=20)
fig<-fig%>%layout(plot_bgcolor='rgba(254, 247, 234)',font=title,showlegend=F,margin = list(l=80, r=50, b=100, t=120, pad=4),paper_bgcolor = 'rgba(0,0,0,0)',plot_bgcolor ='rgba(0,0,0,0)')%>%add_annotations(y=1.07, x=0.5, text=~paste(input$InputRecipe),
showarrow=F,font=list(size=15))%>%add_annotations(x=0.1,y=0.3, text='Nutrition Per 100 grams', showarrow=F,font=list(size=14))%>%add_annotations (x=0.88,y=0.3,text='Nutrition Per Ingredients', showarrow=F,font=list(size=14))
fig
})
})
})
observeEvent(input$InstructionRecipe, {
instructions <- get_instructions(recipe_df$df)
output$instructionSteps <- renderUI({
i <- 1
steps <- ""
return(
box(
title = input$InstructionRecipe,
width = 6,
solidHeader = TRUE,
#gradientColor = "teal",
status = "primary",
renderUI(for (instructions in instructions[input$InstructionRecipe]) {
return(lapply(1:length(instructions), function(i) {
p(paste0("Step ", i, ": ", instructions[i]))
}))
})
)
)
})
})
output$recipe_df <- DT::renderDataTable({
recipe_df$df
}, rownames = FALSE, options = list(pageLength = 7))
output$grocery_data <-
DT::renderDataTable(deleteButtonColumn(grocery_data$df, 'delete_button'))
observeEvent(input$deletePressed, {
rowNum <- parseDeleteEvent(input$deletePressed)
grocery_data$df <-
data.frame(grocery_data$df, stringsAsFactors = F)
dataRow <- grocery_data$df[rowNum, ]
values$deletedRows <- rbind(dataRow, values$deletedRows)
values$deletedRowIndices <-
append(values$deletedRowIndices, rowNum, after = 0)
grocery_data$df <- grocery_data$df[-(rowNum), ]
})
df <-
data.frame('Nutrition.Name' = character(), 'Value' = integer())
observeEvent(input$Add, {
values$number <- input$number
for (i in recipe_df$df$Recipes) {
de <- nutri_table(recipe_data, i, values$number)
df <- rbind(df, de)
}
output$calories <- renderValueBox ({
df <-
df %>% group_by(Nutrition.Name) %>% summarize(Value = sum(Value))
u <- c('KJ(cal)', 'gram', 'gram', 'gram', 'mg', 'gram')
values$col1 <- data.frame(df, units = u)
print("Dimple3...............................................")
#validate(need(values$col1, ''))
dat <-
values$col1 %>% filter(Nutrition.Name == 'Energy') %>% dplyr::select(Value)
if (nrow(dat) > 0) {
valueBox(
paste(dat$Value, 'Kcal'),
'Energy',
icon = icon('fire'),
color = 'red',
width = NULL
)
}
else{
valueBox(
'Add Recipe',
'Energy',
icon = icon('fire'),
color = 'red',
width = NULL
)
}
})
output$Protein <- renderValueBox({
#validate(need(values$col1, ''))
df1 <-
values$col1 %>% filter(Nutrition.Name == 'Protein') %>% dplyr::select(Value)
if (nrow(df1) > 0) {
valueBox(
paste(df1$Value, 'gm'),
'Protein',
icon = icon('child'),
color = 'maroon',
width = NULL
)
}
else{
valueBox(
'Add Recipe',
'Protein',
icon = icon('child'),
color = 'maroon',
width = NULL
)
}
})
output$Fat <- renderValueBox({
#validate(need(values$col1, ''))
df1 <-
values$col1 %>% filter(Nutrition.Name == 'Fat') %>% dplyr::select(Value)
if (nrow(df1) > 0) {
valueBox(
paste(df1$Value, 'gm'),
'Fat',
icon = icon('bacon'),
color = 'yellow',
width = NULL
)
}
else{
valueBox(
'Add Recipe',
'Fat',
icon = icon('bacon'),
color = 'yellow',
width = NULL
)
}
})
output$Sodium <- renderValueBox({
#validate(need(values$col1, ''))
df1 <-
values$col1 %>% filter(Nutrition.Name == 'Sodium') %>% dplyr::select(Value)
if (nrow(df1) > 0) {
valueBox(
paste(df1$Value, 'mg'),
'Sodium',
icon = icon('mortar-pestle'),
color = 'blue',
width = NULL
)
}
else{
valueBox(
'Add Recipe',
'Sodium',
icon = icon('baby'),
color = 'blue',
width = NULL
)
}
})
output$Saturated_Fat <- renderValueBox({
#validate(need(values$col1, ''))
df1 <-
values$col1 %>% filter(Nutrition.Name == 'Saturated fat') %>% dplyr::select(Value)
if (nrow(df1) > 0) {
valueBox(
paste(df1$Value, 'gm'),
'Saturated Fat',
icon = icon('beer'),
color = 'orange',
width = NULL
)
}
else{
valueBox(
'Add Recipe',
'Saturated Fat',
icon = icon('pizza-slice'),
color = 'orange',
width = NULL
)
}
})
output$Sugar <- renderValueBox({
#validate(need(values$col1, ''))
df1 <-
values$col1 %>% filter(Nutrition.Name == 'Sugar') %>% dplyr::select(Value)
if (nrow(df1) > 0) {
valueBox(
paste(df1$Value, 'gm'),
'Sugar',
icon = icon('stroopwafel'),
color = 'lime',
width = NULL
)
}
else{
valueBox(
'Add Recipe',
'Sugar',
icon = icon('cookie'),
color = 'lime',
width = NULL
)
}
})
})
# observeEvent(input$Add, {
#
# })
#
}
# Run the application
shinyApp(ui = ui, server = server)
pie_data
pie
pie%>%select(title=='Shrimp and Caper Salad')
pie%>%dplyr::select(title=='Shrimp and Caper Salad')%>%select(nutrition.name)
pie%>%select(nutrition.name)
pie%>%dplyr::select(nutrition.name)
pie%>%dplyr::select(title,nutrition.name,quanity)
pie%>%dplyr::select(title,nutrition.name,quantity)
pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')
r<-recipe_data$ingredient_list
r<-recipe_data$ingredient_list
r
r<-recipe_data$ingredient_list
r[1]
pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')%>%group_by(nutrition.name)%>%summarise(quantity=sum(quantity))
trail<-pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')%>%group_by(nutrition.name)%>%summarise(quantity=sum(quantity))
trail<-pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')%>%group_by(nutrition.name)%>%summarise(quantity=sum(quantity))
trail
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar')
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name)
fig%>%layout(x)
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar')
fig%>%layout(x)
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name)
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame=~nutrition.name)
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name)
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~quantity)
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~nnutrition.name)
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~nutrition.name)
fig
recipe_data$title[1:10]
title<-recipe_data
trail<-pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')
trail
?aggregate
title<-recipe_data
trail<-pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')%>%group_by(title,nutrition.name)%>%summarise(quantity=sum(quantity))
trail
i<-recipe_data$title[1:10]
title<-recipe_data
trail<-pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title==i)%>%group_by(title,nutrition.name)%>%summarise(quantity=sum(quantity))
trail
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~title)
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~distinct1(title))
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~distinct(title))
fig
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~distinct(title))
fig
title<-recipe_data
trail<-pie%>%dplyr::select(title,nutrition.name,quantity)%>%filter(title=='Shrimp and Caper Salad')%>%group_by(title,nutrition.name)%>%summarise(quantity=sum(quantity))
trail
fig<-plot_ly(data=trail,x= ~nutrition.name,y= ~quantity,type='bar',color = ~nutrition.name,frame = ~title)
fig
library(ggplot2)
recipe_csv <- read.csv("data/final_data.csv")
bubble_data <- read.csv('data/Bubble.csv')
recipe_data <- recipe_csv[c(3, 5, 6, 7, 9, 10, 13, 14, 16, 18, 20)]
colnames(recipe_data) <-
c(
'url',
'title',
'id',
'instructions',
'ingredient_list',
'fsa_lights_per_100gm',
'nutr_per_ingr',
'nutr_per_100gm',
'quantity',
'units',
'weight_per_ingr'
)
clean_data <- function(col_name){
pattern <- c("\\[\\{'text': ", "\\{'text'", ": ", "\\}", "\\]", "'",
"\\[", "\\]", '\\}', "\\[\\{", '\\{', '\\]')
for(i in 1:length(pattern)){
col_name <- str_remove_all(col_name, pattern[i])
}
return (noquote(col_name))
}
clean_data_nutrients <- function(col_name){
pattern <- c('\\[\\{', '\\}', '\\{', '\\]')
for(i in 1:length(pattern)){
col_name <- str_remove_all(col_name, pattern[i])
}
return (noquote(col_name))
}
recipe_data$ingredient_list <- clean_data(recipe_data$ingredient_list)
recipe_data$quantity <- clean_data(recipe_data$quantity)
recipe_data$weight_per_ingr <- clean_data(recipe_data$weight_per_ingr)
recipe_data$nutr_per_ingr <- clean_data_nutrients(recipe_data$nutr_per_ingr)
recipe_data$nutr_per_100gm <- clean_data_nutrients(recipe_data$nutr_per_100gm)
nutritiontable<-data.frame('fat'=integer(),'nrg'=integer(),'pro'=integer(),'sat'=integer(),'sod'=integer(),'sug'=integer(),'fat'=integer())
gmtable<-data.frame('energy'=integer(),'fat'=integer(),'proteins'=integer(),'salt'=integer(),'saturates'=integer(),'sugars'=integer())
for (i in (1:length(recipe_data$nutr_per_ingr)))
{
new <- strsplit(recipe_data$nutr_per_ingr[i], ',')
new1 <- strsplit(recipe_data$nutr_per_100g[i], ',')
new <- new[[1]]
new1 <- new1[[1]]
new <- noquote(new)
new1 <- noquote(new1)
df <- data.frame(new)
df1 <- data.frame(new1)
df <- df %>% separate(new, c('content', 'value'), sep = ':')
df1 <- df1 %>% separate(new1, c('content', 'value'), sep = ':')
df[, 1] <- (gsub("'", '', df[, 1]))
df1[, 1] <- (gsub("'", '', df1[, 1]))
df[, 2] <- as.numeric(df[, 2])
df1[, 2] <- as.numeric(df1[, 2])
df <- df %>% group_by(content) %>% summarize(value = sum(value))
df1 <- df1 %>% group_by(content) %>% summarize(value = sum(value))
df <- pivot_wider(df, names_from = content, values_from = value)
df1 <- pivot_wider(df1, names_from = content, values_from = value)
df <- df %>% rename('fat.1' = 'fat')
nutritiontable[nrow(nutritiontable) + 1, 1:7] <- df
gmtable[nrow(gmtable)+1, 1:6] <- df1
}
options(scipen=999)
nutritiontable<-round(nutritiontable,2)
rownames(nutritiontable)<-NULL
recipe_data<-cbind(recipe_data,nutritiontable)
recipe_data<-recipe_data%>%rename('Fat'='fat','Energy'='nrg','Protein'='pro','Saturated fat'='sat','Sodium'='sod','Sugar'='sug')
gmtable<-round(gmtable,2)
rownames(gmtable)<-NULL
recipe_data<-cbind(recipe_data,gmtable)
recipe_data<- recipe_data %>% rename('Energy_100'=energy,'Fat_100'=fat,'Proteins_100'=proteins,'Salt_100'=salt,'Saturated fat_100'=saturates,'Sugar_100'=sugars)
recipe_data
library(shiny)
install.packages("shinyalert")
library(shinydashboard)
library(dashboardthemes)
library(tidyr)
library(plotly)
library(reshape2)
library(shiny)
runApp('global.R')
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
runApp('global.R')
knitr::opts_chunk$set(echo = TRUE)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='kk-balaji',
token='8992228CADCF3034B10322AB9A3A9C64',
secret='<SECRET>')
rsconnect::setAccountInfo(name='kk-balaji',
token='8992228CADCF3034B10322AB9A3A9C64',
secret='<SECRET>')
Sys.setlocale(locale="English")
rsconnect::setAccountInfo(name='kk-balaji', token='8992228CADCF3034B10322AB9A3A9C64', secret='bVrd8GfB59u0x6Ew9AUJ6WGe5aTtRK6lAs8X+I7J')
runApp('global.R')
runApp('global.R')
runApp('global.R')
runApp('global.R')
runApp('global.R')
runApp('global.R')
runApp('global.R')
# DO NOT TOUCH THIS FILE!!!
# IT IS NOT SUPPOSED TO BE TAMPERED
library(rsconnect)
rsconnect::deployApp()
library(shiny)
rsconnect::deployApp()
# Run the application
shinyApp(ui = ui, server = server)
